use System.Concurrency;
use Collection.Generic;
use Web.HTTP;

#~
Mini web server test

- curl -k -X POST https://localhost:60013 -H "Content-Type: application/json" -d "{ \"long\": \"https://www.cockroachlabs.com/docs/stable/build-a-go-app-with-cockroachdb.html\" }"
- objeck_lsp.obe objk_apis.json 6013 debug
- ..\..\..\..\objeck-lsp\server
~#
class Test {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 4) {
			cert := args[0];
			cert_key := args[1];
			cert_key_passwd := args[2];
			port := args[3]->ToInt();

			MyHandler->Init();			
			WebServer->ServeSecure(MyHandler->New()->GetClass(), port, cert, cert_key, cert_key_passwd, true);
		};
	}
}

#~
My handler
~#
class MyHandler from HttpsRequestHandler {
	@content_cache : static : Cache<String, ByteArrayHolder>;
	@content_type_cache : static : Hash<String, String>;
	@content_mutex : static : ThreadMutex;
	
	function : Init() ~ Nil {
		# MIME type mapping
		@content_type_cache := Hash->New()<String, String>;
		@content_type_cache->Insert(".html", "text/html");
		@content_type_cache->Insert(".htm", "text/html");
		@content_type_cache->Insert(".css", "text/css");
		@content_type_cache->Insert(".png", "image/png");
		@content_type_cache->Insert(".jpg", "image/jpeg");
		@content_type_cache->Insert(".ico", "image/x-icon");
		@content_type_cache->Insert(".js", "application/javascript");

		@content_cache := Cache->New(Cache->Type->MRU, 16)<String, ByteArrayHolder>;
		@content_mutex := ThreadMutex->New("__content_cache__");
	}

	New() {
		Parent();
	}

	method : ProcessGet(request_url : String, request_headers : Map<String, String>, response_headers : Map<String, String>) ~ Byte[] {
		content : Byte[];

		request_type_index := request_url->FindLast('.');
		if(request_type_index > 0) {
			# check the request type
			request_type := request_url->SubString(request_type_index, request_url->Size() - request_type_index);
			if(request_type <> Nil) {
				content_type := @content_type_cache->Find(request_type);
				if(content_type <> Nil) {
					path_name := "./html";
					path_name += request_url;

					# lock cache for while we search or insert content
					critical(@content_mutex) {
						# found in cache
						found := @content_cache->Find(path_name);
						if(found <> Nil) {
							content := found->Get();
						}
						# not found, add to cache
						else {
							content := System.IO.File.FileReader->ReadBinaryFile(path_name);
							if(content <> Nil) {
								@content_cache->Insert(path_name, ByteArrayHolder->New(content));
							};
						};
					};

					if(content <> Nil) {
						response_headers->Insert("Content-type", "{$content_type}");
					};
				};
			};
		};

		return content;
	}

	method : ProcessPost(buffer : Byte[]) ~ Bool {
		content := String->New(buffer);
		content->PrintLine();
		return true;
	}
}