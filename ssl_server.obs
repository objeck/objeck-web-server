use System.Concurrency;
use Collection.Generic;
use System.IO.Net;

#~
Mini webserver
~#
class SSLServer {
	@server : static : TCPSecureSocketServer;
	
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 3) {
			port := 60013;
			platform := Runtime->GetPlatform();
			host := TCPSocket->HostName();

			RequestHandler->Init();
			Runtime->SetSignal(Runtime->Signal->SIGINT, Shutdown(Int) ~ Nil);
			@server := TCPSecureSocketServer->New(args[0], args[1], args[2], port);

			if(@server->Listen()) {
			 	"Running on {$host} ({$platform}) port {$port}..."->PrintLine();
				while(true) {
					RequestHandler->New(true)->Execute(@server->Accept());
				};
			}
			else {
				# TODO: log errors
				err_msg := @server->GetLastError();
				"Error: '{$err_msg}'"->ErrorLine();
			};
		};
  	}

	function : Shutdown(id : Int) ~ Nil {
		if(@server <> Nil) {
			@server->Close();
		};
		"Shutting down..."->PrintLine();
		Runtime->Exit(0);
	}
}

#~
Request handler
~#
class RequestHandler from Thread {
	@content_cache : static : Cache<String, ByteArrayHolder>;
	@content_type_cache : static : Hash<String, String>; # TODO: LRU cache
	@content_mutex : static : ThreadMutex;
	@debug : Bool;

	New(debug : Bool) {
		Parent();		
		@debug := debug;
	}

	function : Init() ~ Nil {
		# MIME type mapping
		@content_type_cache := Hash->New()<String, String>;
		@content_type_cache->Insert(".html", "text/html");
		@content_type_cache->Insert(".htm", "text/html");
		@content_type_cache->Insert(".css", "text/css");
		@content_type_cache->Insert(".png", "image/png");
		@content_type_cache->Insert(".jpg", "image/jpeg");
		@content_type_cache->Insert(".ico", "image/x-icon");
		@content_type_cache->Insert(".js", "application/javascript");

		@content_cache := Cache->New(Cache->Type->MRU, 16)<String, ByteArrayHolder>;
		@content_mutex := ThreadMutex->New("__content_cache__");
	}

	method : public : Run(param : Base) ~ Nil {
		client := param->As(TCPSecureSocket);

		if(client <> Nil & client->IsOpen()) {
			# process request
			request_verb : String;
			request_url : String;

			request := client->ReadLine();
			if(@debug) {
				"Request: '{$request}'"->PrintLine();
			};

			if(request->Size() > 0) {
				request_parts := request->Split(" ");
				if(request_parts->Size() = 3) {
					request_verb := request_parts[0];
					request_url := request_parts[1];
				};
			};

			# get headers
			headers := GetHeaders(client);
			
			if(headers <> Nil & request_verb->Equals("GET")) {
				# retrieve content
				if(request_url = Nil | request_url->Equals("/") | request_url->Has("..")) {
					request_url := "/index.html";
				};

				# write response
				content_header := "";
				content := LoadContent(request_url, content_header);
				if(content <> Nil) {
					Write200(content, content_header, client);
				}
				else {
					Write302(client);
				};
			};
			
			client->Close();
		};
	}

	method : Write200(content : Byte[], content_header : String, client : TCPSecureSocket) ~ Nil {
		client->WriteString("HTTP/1.1 200 OK\r\n{$content_header}\r\n");
		client->WriteBuffer(content);
	}

	method : Write302(client : TCPSecureSocket) ~ Nil {
		content := "<html><head><meta charset=\"utf-8\"></head><body><h1>Object not found!</h1></body></html>"->ToByteArray();
		content_size := content->Size();
		client->WriteString("HTTP/1.1 302 Found\r\nLocation: /index.html\r\nConnection: close\r\n\r\n");
	}

	method : public : GetHeaders(client : TCPSecureSocket) ~ Map<String, String> {
		headers := Map->New()<String, String>;
		
		header := client->ReadLine();
		while(header <> Nil & header->Size() > 0) {
			if(@debug) {
				"header='{$header}'"->PrintLine();
			};

			header_parts := header->Split(" ");
			if(header_parts->Size() = 2) {
				headers->Insert(header_parts[0], header_parts[1]);
			};

			header := client->ReadLine();
		};

		return headers;
	}

	method : LoadContent(request_url : String, header : String) ~ Byte[] {
		content : Byte[];

		request_type_index := request_url->FindLast('.');
		if(request_type_index > 0) {
			# check the request type
			request_type := request_url->SubString(request_type_index, request_url->Size() - request_type_index);
			if(request_type <> Nil) {
				content_type := @content_type_cache->Find(request_type);
				if(content_type <> Nil) {
					# lock cache for while we search or insert content
					critical(@content_mutex) {
						path_name := "./html";
						path_name += request_url;

						# found in cache
						found := @content_cache->Find(path_name);
						if(found <> Nil) {
							content := found->Get();
						}
						# not found, add to cache
						else {
							content := System.IO.File.FileReader->ReadBinaryFile(path_name);
							if(content <> Nil) {
								@content_cache->Insert(path_name, ByteArrayHolder->New(content));
							};
						};

						if(content <> Nil) {
							content_size := content->Size();
							header += "Content-type: {$content_type}\r\nContent-Length: {$content_size}\r\nAccept-Ranges: bytes\r\nConnection: close\r\n";
						};
					};
				};
			};
		};

		return content;
	}
}