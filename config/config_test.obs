use Collection.Generic;
use Data.JSON;

class Test {
	@file_type_handler : Hash<String, TypeHandler>;

	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			Test->New()->Process(args[0]);
		};
	}

	New() {
		@file_type_handler := Hash->New()<String, TypeHandler>;
	}

	method : Process(filename : String) ~ Nil {		
		parser := JsonParser->New(System.IO.Filesystem.FileReader->ReadFile(filename));
		if(parser->Parse()) {
			"### Parsed! ###"->PrintLine();
			files_json := parser->GetRoot()->Get("files");
			if(files_json <> Nil) {
				each(i : files_json) {
					file_json := files_json->Get(i);
					if(file_json->Has("types")) {
						AddFile(file_json);
					};
				};
			};
		};
	}

	method : AddFile(file_json : JsonElement) ~ Nil {
		types_json := file_json->Get("types");
		location_json :=  file_json->Get("location");

		if(types_json <> Nil & location_json <> Nil) {
			types_str := types_json->GetString();
			type_strs := types_str->Split(',');
			if(type_strs->Size() > 0) {
				each(i : type_strs) {
					AddHandler(type_strs[i], file_json);
				};
			}
			else {
				AddHandler(types_str, file_json);
			};
		};
	}

	method : AddHandler(type : String, file_json : JsonElement) ~ Nil {
		alias_str : String;
		alias_json := file_json->Get("alias");
		if(alias_json <> Nil) {
			alias_str := alias_json->GetString();
		};

		location_str : String;
		location_json := file_json->Get("location");
		if(location_json <> Nil) {
			location_str := location_json->GetString();
		};

		cache_flag : Bool;
		cache_json := file_json->Get("cache");
		if(cache_json <> Nil) {
			cache_flag := cache_json->GetBool();
		};

		# get/add handler
		type_handler := @file_type_handler->Find(type);
		if(type_handler = Nil) {
			type_handler := TypeHandler->New(type);
		};

		if(<>type_handler->Insert(alias_str, location_str, cache_flag)) {
			"Unable to add file, duplicate location '{$location_str}'"->ErrorLine();
		};
	}
}

class TypeHandler {
	@type : String;
	@alias_map : Map<String, String>;
	@location_set : Set<String>;

	New(type : String) {
		@type := type;
		@alias_map := Map->New()<String, String>;
		@location_set := Set->New()<String>;
	}

	method : public : Insert(alias_str : String, location_str : String, cache_flag : Bool) ~ Bool {
		if(@location_set->Has(location_str)) {
			return false;
		};

		"### Working... ###"->PrintLine();
		return true;
	}
}
